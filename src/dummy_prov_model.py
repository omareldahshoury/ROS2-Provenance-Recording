# Importing the required libraries
from prov.model import ProvDocument
import prov
import datetime

# For visualizations
from prov.dot import prov_to_dot
from IPython.display import Image

# First we create a Provenance data file
ros = ProvDocument()

# We can write name spaces here
ros.set_default_namespace('https://docs.ros.org/en/dashing/Installation.html')
ros.add_namespace('node', 'https://docs.ros.org/en/dashing/Tutorials/Understanding-ROS2-Nodes.html') # represents ros nodes
ros.add_namespace('topic', 'https://docs.ros.org/en/dashing/Tutorials/Topics/Understanding-ROS2-Topics.html') # represents ros topics
ros.add_namespace('activity', 'undefined') # represents the processes performed

# Some more for future use
ros.add_namespace('module', 'python programs or groups') # represents collection of ros enities, may be in the form of a program
ros.add_namespace('user', 'agent editing/contributing to the program') # represents code contributors
ros.add_namespace('enduser', 'end user who interacts with the program') # this represents the end user and his interaction with the code


# Printing the prov so far
# print(ros.get_provn())

### Creating the elements of Prov (Entities, Agents and Activities/Processes)
# First we generate the nodes as agents
ros.agent('node:talker')
ros.agent('node:listner')
ros.agent('node:/_ros2cli_daemon_0')

# Printing the prov so far
# print(ros.get_provn())

# We then create the processes/activities
ros.activity('activity:Publish_to_chatter', datetime.datetime.now()) # The topic name is associated with the activity itself
ros.activity('activity:Subscribe_to_chatter', datetime.datetime.now())
ros.activity('activity:Publish_to_parameter_events', datetime.datetime.now())
ros.activity('activity:Publish_to_rosout', datetime.datetime.now())

# Printing the prov so far
# print(ros.get_provn())

# We then create the entities that are being used
ros.entity('topic:chatter',\
           {'prov:label':'chatter',\
            'prov:type':'std_msgs/msg/String',\
            'prov:list_of_publishers':'node_talker',\
            'prov:list_of_subscribers':'node_listener',\
            'prov:time_initialized':datetime.datetime.now()})
ros.entity('topic:parameter_events',\
           {'prov:label':'parameter_events',\
            'prov:type':'rcl_interfaces/msg/ParameterEvent',\
            'prov:time_initialized':datetime.datetime.now()})
ros.entity('topic:rosout',\
           {'prov:label':'rosout',\
            'prov:type':'rcl_interfaces/msg/Log',\
            'prov:time_initialized':datetime.datetime.now()})

# Printing the prov doc so far
# print(ros.get_provn())

# Finally we draw the relations between the nodes and the topics

# Node talker generated topic chatter and the other 2 nodes were generated by the cli
ros.wasGeneratedBy('topic:chatter', 'node:talker')
ros.wasGeneratedBy('topic:parameter_events', 'node:/_ros2cli_daemon_0')
ros.wasGeneratedBy('topic:rosout', 'node:/_ros2cli_daemon_0')


# Chatter uses the Publish_to_chatter activity to which data is publish by talker
ros.used('activity:Publish_to_chatter', 'topic:chatter')
ros.used('node:talker','activity:Publish_to_chatter')

# Listner listens to the chatter topic via listen process
ros.used('activity:Subscribe_to_chatter','node:listner')
ros.used('topic:chatter', 'activity:Subscribe_to_chatter')

# Defining the hidden relations

# Publishing to parameter_events
# talker
ros.used('activity:Publish_to_parameter_events', 'topic:parameter_events')
ros.used('node:talker','activity:Publish_to_parameter_events')
ros.used('node:/_ros2cli_daemon_0','activity:Publish_to_parameter_events')

# chatter
# ros.used('activity:Publish_to_parameter_events', 'topic:parameter_events')
ros.used('node:listner','activity:Publish_to_parameter_events')


# Publishing to rosout
# talker
ros.used('activity:Publish_to_rosout', 'topic:rosout')
ros.used('node:talker','activity:Publish_to_rosout')
# chatter
# ros.used('activity:Publish_to_rosout', 'topic:rosout')
ros.used('node:listner','activity:Publish_to_rosout')
# ros 2 cli
ros.used('node:/_ros2cli_daemon_0','activity:Publish_to_rosout')


# Saving the File and Visualizing the graph
dot = prov_to_dot(ros)
dot.write_png('ros-prov.png')
Image('ros-prov.png')

# Printing the prov doc so far
# print(ros.get_provn())